include ../../components/header/header.pug
main.interview
  section.head-container
    h1.title= configInterviewQuestionnaire.title
    p.content!= configInterviewQuestionnaire.description
    .important
      img(src="../public/assets/icons/important.svg", alt=important)
      span!= "Importante! Comece sua resposta com a palavra EU. <u>Todas as perguntas são obrigatórias para a geração do relatório!</u>"
    hr
  section.container-question
    span
      b Pergunta #{ actualQuestionIndex }:
      |
      | #{ listQuestion[actualQuestionIndex - 1].description }
    .textarea-container
      textarea.input-question(rows="4", cols="50", placeholder="Eu...")
      .progress-section
        label.progress-label(for="progress") 0%
        progress.progress-bar(value="0", max="100")
    .selector
      each question, index in listQuestion
        a.selector__div--normal(
          href=`/interview/${questionnaireId}?question=${question.index}`
        )= question.index
  section.btns
    a.btnInterview(
      href=`/interview/${questionnaireId}?question=${actualQuestionIndex - 1}`,
      class=buttons.isBackDisabled ? "disabled" : ""
    )= buttons.back
    a.btnInterview(
      href=`/interview/${questionnaireId}?question=${actualQuestionIndex + 1}`,
      class=buttons.isNextDisabled ? "disabled" : ""
    )= buttons.next

footer
  a.aFooter1(href=buttons.backRoute)
    button.btn2 Anterior
  a.aFooter2
    button.btn3(data-next-route=buttons.nextRoute) Próximo
#loading-indicator.loading-indicator(style="display: none")
  img(
    src="../public/assets/icons/Spinner@1x-1.0s-200px-200px.svg",
    alt="Loading..."
  )
  | Carregando...
script.
  document.addEventListener("DOMContentLoaded", () => {
    const nextButton = document.querySelector(".aFooter2 button");
    const backButton = document.querySelector(".aFooter1 button");
    const loadingIndicator = document.querySelector(".loading-indicator");

    const checkAllCompleted = () => {
      const totalQuestions = #{listQuestion.length};
      const allCompleted = Array.from({ length: totalQuestions }, (_, i) => {
        const progress = parseFloat(localStorage.getItem(`#{interviewId}_progress_${i + 1}`)) || 0;
        return progress >= 100;
      }).every(completed => completed);

      if (allCompleted) {
        nextButton.classList.add("enabled");
      } else {
        nextButton.classList.remove("enabled");
      }
    };

    backButton.addEventListener("click", () => {
      const backRoute = backButton.dataset.backRoute;
      window.location.href = backRoute;
    });

    nextButton.addEventListener("click", async () => {
      if (nextButton.classList.contains("enabled")) {
        const customerName = '#{customerName}';
        const interviewAnswers = Array.from({ length: #{listQuestion.length } }, (_, i) => {
          const answer = localStorage.getItem(`#{interviewId}_question_${i + 1}`) || "";
          return { answer, index: i + 1 };
        });

        const interviewData = {
          interview: {
            id: '#{interviewId}',
            saleId: '#{saleId}',
            templateId: '#{templateId}',
            InterviewAnswers: interviewAnswers
          },
          customerName: customerName,
          customerEmail: '#{customerEmail}',
          vocational: #{vocational}
        };

        loadingIndicator.style.display = "flex";

        try {
          const response = await fetch(`/api/v1/speckresult`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(interviewData),
          });

          if (response.ok) {
            const nextRoute = `/speckResult`;
            window.location.href = nextRoute;
            return;
          } 
          if (response.status !== 400) {
            throw new Error(`API SPECK ERROR: ${response.statusText || response.status}`);
          }
          alert("A soma dos caracteres das respostas não atingiu 300 caracteres. Por favor, aumente o texto de cada pergunta.");

        } catch (error) {
          console.error("Error submitting speck result", error);
          window.location.href = '/error';
        } finally {
          loadingIndicator.style.display = "none";
        }
      }
    });

    checkAllCompleted();
    document.addEventListener("change paste keyup input", checkAllCompleted);

    const textarea = document.querySelector(".input-question");
    const progress = document.querySelector(".progress-bar");
    const progressLabel = document.querySelector(".progress-label");
    const actualIndex = parseInt("#{actualQuestionIndex}");

    const getSelectorClass = (progressValue) => {
      if (progressValue >= 100) {
        return "selector__div--completed";
      } else if (progressValue > 0) {
        return "selector__div--incompleted";
      } else {
        return "selector__div--normal";
      }
    };

    const setProgressValue = (value) => {
      progress.value = value;
      progressLabel.innerText = `${value.toFixed(0)}%`;
    };

    const updateSelectorClasses = () => {
      const allSelectors = document.querySelectorAll(".selector__div--normal, .selector__div--selected, .selector__div--completed, .selector__div--incompleted");

      allSelectors.forEach((selector) => {
        const selectorIndex = parseInt(selector.innerText);
        const storedProgress = parseFloat(localStorage.getItem(`#{interviewId}_progress_${selectorIndex}`)) || 0;
        let addClass = "";

        if (selectorIndex === actualIndex) {
          addClass = "selector__div--selected";
        } else {
          addClass = getSelectorClass(storedProgress);
        }

        selector.classList.remove("selector__div--normal", "selector__div--selected", "selector__div--completed", "selector__div--incompleted");
        if (addClass === "selector__div--completed") {
          const checkMarkIconPath = '../public/assets/icons/checkmark.svg';
          selector.innerHTML = `<img src="${checkMarkIconPath}" alt="checkmark" />`;
        }
        selector.classList.add(addClass);
      });
    };

    window.addEventListener("load", () => {
      setProgressValue(parseFloat(localStorage.getItem(`#{interviewId}_progress_${actualIndex}`)) || 0);
      textarea.value = localStorage.getItem(`#{interviewId}_question_${actualIndex}`) || "";
      updateSelectorClasses();
    });

    textarea.addEventListener("input", () => {
      const questions = !{JSON.stringify(listQuestion)};
      localStorage.setItem(`#{interviewId}_question_${actualIndex}`, textarea.value);
      const regex_pattern = /\w+/g;
      const words = textarea.value.match(regex_pattern) || [];
      const currentQuestion = questions[actualIndex - 1];

      if (words.length >= currentQuestion.maxlength) {
        alert("Você atingiu o limite de palavras para essa pergunta.");
        return;
      }

      const minWords = currentQuestion.minlength;
      const result = Math.min(100, (words.length / minWords) * 100);

      setProgressValue(result);
      localStorage.setItem(`#{interviewId}_progress_${actualIndex}`, result);

      checkAllCompleted();
    });
  });
